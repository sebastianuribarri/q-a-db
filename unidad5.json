[
  {
    "pregunta": "¿Qué es el Lenguaje de Manipulación de Datos (DML) en SQL y qué operaciones incluye?",
    "respuesta": "El Lenguaje de Manipulación de Datos (DML) es una parte fundamental del lenguaje SQL y permite a los usuarios interactuar directamente con los datos contenidos en una base de datos relacional. A través del DML, los usuarios pueden realizar operaciones como insertar nuevas filas, modificar datos existentes, eliminar datos y consultar información. Las principales sentencias del DML son: INSERT (para agregar nuevas filas a una tabla), UPDATE (para modificar datos existentes en una o varias filas), DELETE (para eliminar filas de una tabla) y SELECT (para recuperar datos de una o más tablas). Estas operaciones son esenciales para gestionar la información una vez que la base de datos ha sido definida con sus estructuras y relaciones mediante el DDL (Lenguaje de Definición de Datos)."
  },
  {
    "pregunta": "¿Cómo se utiliza la sentencia SELECT en consultas simples en SQL y qué opciones ofrece?",
    "respuesta": "La sentencia SELECT se utiliza para consultar y recuperar datos de una tabla en una base de datos relacional. En su forma más simple, se estructura como: SELECT columnas FROM tabla. Se pueden renombrar columnas o tablas usando la cláusula AS (opcional). Para seleccionar todas las columnas se utiliza el asterisco (*). Además, si se desea filtrar filas específicas, se emplea la cláusula WHERE junto con operadores de comparación, predicados y conectores lógicos. Para evitar la repetición de filas, se puede incluir DISTINCT después de SELECT. Ejemplo: SELECT DISTINCT ciudad FROM empleados. Esta sentencia es la base para operaciones más complejas y también puede ser usada junto con otras como INSERT, UPDATE o DELETE."
  },
  {
    "pregunta": "¿Qué operadores y predicados se utilizan en SQL para construir condiciones en las consultas?",
    "respuesta": "SQL proporciona una variedad de operadores y predicados para construir condiciones dentro de las cláusulas WHERE y HAVING. Los operadores aritméticos incluyen + (suma), - (resta), * (multiplicación) y % (división). Los conectores lógicos más comunes son AND, OR y NOT. Los predicados son expresiones que se evalúan como verdaderas, falsas o desconocidas y permiten construir condiciones más específicas: Comparación (=, <>, <, >, <=, >=), BETWEEN...AND... (para valores dentro de un rango), IN / NOT IN (para valores dentro de una lista), LIKE (para coincidencias de patrones con comodines % y _), IS NULL / IS NOT NULL (para verificar valores nulos), y EXISTS / NOT EXISTS (para verificar la existencia de resultados en subconsultas). También se pueden usar ALL, SOME y ANY con subconsultas para comparar un valor con todos o algunos de los resultados obtenidos por una subconsulta."
  },
  {
    "pregunta": "¿Cómo se insertan datos en una tabla y cuáles son las distintas formas de utilizar INSERT?",
    "respuesta": "La sentencia INSERT se usa para agregar nuevas filas a una tabla en una base de datos. Hay varias formas de usarla: (1) INSERT INTO tabla (columnas) VALUES (valores) para insertar una sola fila especificando columnas y valores, (2) INSERT INTO tabla VALUES (valores) si se insertan todos los valores en orden, y (3) INSERT INTO tabla (columnas) SELECT ... FROM otra_tabla, que permite copiar filas desde otra tabla usando una subconsulta. También se pueden insertar múltiples filas de una sola vez usando la sintaxis VALUES (...), (...), (...). Cuando se usan valores por omisión, se puede usar DEFAULT o NULL según corresponda. Es fundamental que los valores coincidan en tipo y orden con las columnas indicadas para evitar errores de integridad o sintaxis."
  },
  {
    "pregunta": "¿Qué es una subconsulta en SQL y cómo se utiliza?",
    "respuesta": "Una subconsulta es una consulta anidada dentro de otra consulta principal, típicamente ubicada en la cláusula WHERE, HAVING o incluso dentro de SELECT. Se evalúa primero y su resultado se utiliza por la consulta externa. Por ejemplo, se puede usar una subconsulta para obtener el salario más alto de una tabla y luego buscar todos los empleados que ganan ese salario. Ejemplo: SELECT nombre FROM empleados WHERE salario = (SELECT MAX(salario) FROM empleados). Las subconsultas pueden devolver un solo valor (escalares) o múltiples filas y columnas. También pueden emplearse con predicados como IN, EXISTS, ANY y ALL para realizar comparaciones más complejas."
  },
  {
    "pregunta": "¿Cómo se combinan tablas en SQL y qué tipos de JOIN existen?",
    "respuesta": "La combinación de tablas permite consultar datos que están distribuidos en distintas tablas relacionadas. Las combinaciones pueden hacerse mediante producto cartesiano o mediante JOIN. Las formas más comunes de JOIN son: (1) INNER JOIN: combina filas que cumplen una condición de igualdad entre dos tablas, (2) LEFT JOIN: devuelve todas las filas de la tabla izquierda y las coincidentes de la derecha, completando con NULL si no hay coincidencia, (3) RIGHT JOIN: similar al anterior, pero se prioriza la tabla derecha, (4) FULL OUTER JOIN: incluye todas las filas de ambas tablas, completando con NULL donde no haya coincidencia, y (5) NATURAL JOIN: une tablas por columnas con el mismo nombre y elimina duplicados. Estas combinaciones permiten acceder a información dispersa respetando las relaciones entre entidades."
  },
  {
    "pregunta": "¿Qué son las funciones de agregación en SQL y cómo se utilizan con GROUP BY y HAVING?",
    "respuesta": "Las funciones de agregación permiten realizar cálculos sobre un conjunto de filas. Las más comunes son: COUNT (cuenta filas), SUM (suma valores), AVG (promedio), MIN (mínimo) y MAX (máximo). Estas funciones se utilizan normalmente junto con GROUP BY, que agrupa las filas por uno o más atributos, permitiendo aplicar funciones de agregación por grupo. La cláusula HAVING se emplea para establecer condiciones sobre los resultados agregados, a diferencia de WHERE, que filtra filas individuales antes del agrupamiento. Ejemplo: SELECT cod_tratamiento, AVG(valor) FROM tratamientos GROUP BY cod_tratamiento HAVING AVG(valor) > 100. Esto devuelve los tratamientos cuyo valor promedio supera los 100."
  },
  {
    "pregunta": "¿Qué son las variables, tablas temporales y expresiones comunes de tabla (CTE) en SQL?",
    "respuesta": "Las variables son espacios en memoria donde se pueden almacenar valores para su uso dentro de una sesión SQL. Se pueden definir e inicializar con SET o SELECT INTO. Las tablas temporales son tablas que existen solo durante la sesión actual, útiles para almacenar resultados intermedios. Se crean con CREATE TEMPORARY TABLE y se eliminan con DROP TEMPORARY TABLE. Las expresiones comunes de tabla (CTE) se definen con la cláusula WITH y permiten nombrar una subconsulta para ser reutilizada dentro de una misma consulta. Las CTE mejoran la legibilidad y la modularidad del código SQL, y también permiten consultas recursivas, útiles para estructuras jerárquicas como árboles o listas de dependencia."
  },
  {
    "pregunta": "¿Qué son las funciones definidas por el usuario en SQL y cómo se implementan?",
    "respuesta": "Las funciones definidas por el usuario (UDF) permiten encapsular lógica que devuelve un valor escalar y pueden ser reutilizadas en distintas partes del sistema. Se definen con CREATE FUNCTION, indicando los parámetros de entrada, el tipo de retorno y el cuerpo de la función. Pueden usarse en consultas como cualquier función integrada. Ejemplo: una función que devuelve el precio actual de un producto dado su ID, proveedor y fecha. Estas funciones se ejecutan en el servidor y ayudan a centralizar y reutilizar la lógica de negocio, aunque deben usarse con criterio para evitar sobrecargar el motor de la base de datos."
  },
  {
    "pregunta": "¿Qué son los procedimientos almacenados (stored procedures) y cuáles son sus ventajas y desventajas?",
    "respuesta": "Los procedimientos almacenados son bloques de código SQL que se almacenan en el servidor y se ejecutan cuando se los invoca. Pueden contener lógica compleja, estructuras de control como IF, WHILE y CASE, y permiten modularizar tareas frecuentes como inserciones, actualizaciones o cálculos complejos. Entre sus ventajas destacan la centralización de la lógica, reducción del tráfico de red, encapsulamiento y mejoras en seguridad. Sin embargo, tienen algunas desventajas como la reducción de la escalabilidad, ya que los procedimientos están ligados a un motor específico y pueden ser difíciles de migrar. También pueden consumir recursos del servidor si se abusa de ellos. Se recomienda utilizarlos con moderación y para tareas bien definidas."
  }
]
